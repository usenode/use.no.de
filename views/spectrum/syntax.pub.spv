
<~inherit "/spectrum/base.spv" />

<~init>
    this.subNavSelected = 'spectrum-syntax';
</~init>

<~method pageTitle>Spectrum Syntax</~method>

<h1>Spectrum Template Syntax</h1>

<p>
    To get started with Spectrum to try the different bits of syntax, see <a href="/micro/getting-started">Getting Started with Micro and Spectrum</a>.
</p>

<h2 id="expression-tags">Expression Tags - Output Variable or Expression</h2>

<p>
    An expression tag inserts the result of a JavaScript expression into the output:
</p>

<pre><code class="prettyprint">Hello &lt;%= user.name %&gt;.</code></pre>

<p>
    The content will have HTML entities (<code>&lt;</code>, <code>&gt;</code>, <code>&quot;</code> and <code>&amp;</code>) escaped by default to make it suitable for inserting content into an HTML page.
</p>

<h2 id="code-tags">Code Tags - Embed JavaScript in a Template</h2>

<p>
    Code tags allow you to insert larger chunks of JavaScript code:
</p>

<pre><code class="prettyprint">&lt;%
    var pi = 3.14159;
%&gt;</code></pre>

<p>
    Control structures can span multiple code tags, so you can use this feature to embed content within conditionals and loops. However, the following feature is often more convenient for this:
</p>

<h2 id="code-lines">Code Lines - Embed Lines of JavaScript in a Template</h2>

<p>
    Lines of javascript can be mixed with the output by prefixing each line with a colon:
</p>

<pre><code class="prettyprint"><%= ':' %> if (validation_error) {
    &lt;p class=&quot;error&quot;&gt;An error has occurred.&lt;/p&gt;
<%= ':' %> }</code></pre>

<p>
    Multiple lines run together, i.e. this works:
</p>

<pre><code class="prettyprint">: if (validation_error)
<%= ':' %> {
    &lt;p class=&quot;error&quot;&gt;An error has occurred&lt;/p&gt;
<%= ':' %> }</code></pre>

<p>
    The initial colon must have nothing on the line before it apart from whitespace. Neither this whitespace nor the trailing newline are included in the template output.
</p>

<h2 id="methods">Methods - Reuse Within a Template</h2>

<p>
    When a Spectrum template is rendered, an instance of it is created and the main content specified within it is what is returned. In addition to this, you can define and use smaller chunks in methods: 
</p>

<pre><code class="prettyprint">&lt;~method myMethod&gt;
    &lt;p&gt;In myMethod&lt;/p&gt;
&lt;/~method&gt;</code></pre>

<p>
    To include the content in the method, call it as you would with any method in JavaScript - methods are turned into ordinary JavaScript functions attached to the template's prototype:
</p>

<pre><code class="prettyprint">&lt;% this.myMethod() %&gt;</code></pre>

<p>
    Methods can also specify an parameter list and accept arguments:
</p>

<pre><code class="prettyprint">&lt;~method greet (name) &gt;
    &lt;p&gt;Hello &lt;%= name %&gt;.&lt;/p&gt;
&lt;/~method&gt;</code></pre>

<p>
    Arguments are passed as you would expect:
</p>

<pre><code class="prettyprint">&lt;% this.myMethod('World') %&gt;</code></pre>

<p>
    As methods are turned into ordinary JavaScript functions, each method defines its own scope. However, methods are not evaluated in the scope of the surrounding content, so local variables and functions defined outside of the method will not be visible within it. See <a href="#begin-blocks">Begin Blocks</a> for a mechanism for defining local variables that are visible to all methods within a template, as well as the main template content itself (which is just a special type of method internally).
</p>

<h2 id="inherit-directive">Inherit Directive - Controlling Inheritance</h2>

<p>
    Spectrum uses template inheritance to allow you to wrap the content of your template with another template (see <a href="/spectrum/inheritance">Template Inheritance</a>). Use the inherit directive to prevent inheritance or to specify the template to inherit from explicitly. The inherit directive can be anywhere within the top-level of your template - i.e. not within a method or other block tag. To turn off inheritance for a template:
</p>

<pre><code class="prettyprint">&lt;~inherit none /&gt;</code></pre>

<p>
    To inherit from template other than the default (see <a href="/spectrum/inheritance">Tempate Inheritance</a>), specify the path to the parent template from the template root:
</p>

<pre><code class="prettyprint">&lt;~inherit &quot;/path/to/parent.spv&quot; /&gt;</code></pre>

<h2 id="init-block">Init Block - Performing Per Invocation Setup</h2>

<p>
    When a template is rendered, an instance of it is first created. Methods called during the rendering of the template are called on this instance. An init block allows you to include some JavaScript to initialise the instance after it has been created:
</p>

<pre><code class="prettyprint">&lt;~init&gt;
    this.section = 'faqs';
&lt;/~init&gt;</code></pre>

<p>
    This feature is often used to add data to a template that is used to control the way part of the page is rendered by a parent template. For example, you might use this to indicate to a parent template, which navigation link should be highlighted for the current page.
</p>

<h2 id="begin-blocks">Begin Block - Shared Data and Functionality</h2>

<p>
   Begin blocks are similar to init blocks, only they are only executed once for each template rather than for each new instance. The invocant (i.e. value of <code>this</code>) is the prototype object (i.e. the value of the prototype property of the prototype/constructor function) for the template instances. The begin block is executed in the parent scope of the rest of the code in the template, so any variables or functions declared within it can be used anywhere in the template.
</p>

<pre><code class="prettyprint">&lt;~begin&gt;
    this.section = 'faqs';
    function templateScopedFunction () {
        // ...
    }
    var templateScopedVariable = 'foo';
&lt;/~begin&gt;</code></pre>

<p>
    The effect of the property assignment in the above example is the same as that for the init block above - the proprety is available on the template instance. The difference is quite subtle, the proprety assigned to the prototype object in the begin block is shared between all instances of the template and can be overridden for an intervidual template instance.
</p>

