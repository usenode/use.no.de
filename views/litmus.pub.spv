
<~inherit "/litmus/base.spv" />

<~init>
    this.subNavSelected = 'litmus-home';
</~init>

<~method pageTitle>Litmus</~method>

<p>
    Litmus is a unit testing framework for JavaScript.
</p>

<h2>Installing</h2>

<p>
    NPM is recommended for development, although for production you might want to find/build a package for your operating system:
</p>

<pre><code>npm install litmus</code></pre>

<h2>Writing a Simple Test</h2>

<p>
    Litmus tests are ordinary <a href="http://www.commonjs.org/specs/modules/1.0/">CommonJS modules</a>, by convention in a folder called <code>tests</code> within your project. Each test module should export either a <code>litmus.Test</code> or <code>litmus.Suite</code> instance:
</p>

<pre><code class="prettyprint">var litmus = require('litmus');

module.exports = new litmus.Test(module, function () {
    this.plan(1);
    
    this.ok(1 === 1, 'one is equal to one');
});</code></pre>

<p>
    This is a simple test containing a single assertion. To run the tests run the <code>litmus</code> command, with the path to the file containing the test as a parameter:
</p>

<pre><code>litmus tests/simple.js</code></pre>

<p>
    See all <a href="/litmus/assertions">builtin assertions</a>.
</p>

<h2>Combining Multiple Tests into a Suite</h2>

<p>
    To create a test suite, export a <code>litmus.Suite</code> in a module (by convention <code>tests/suite.js</code> in your project):
</p>

<pre><code class="prettyprint">var litmus = require('litmus');

module.exports = new litmus.Suite(module, [
    require('./simple.js'),
    // ...
]);</code></pre>

<p>
    To run the suite:
</p>

<pre><code>litmus tests/suite.js</code></pre>

<h2>Asynchronous Tests</h2>

<p>
    To test asynchronous code, use the <code>this.async</code> method to tell litmus that it should expect assertions after the initial execution of the function passed when creating the <code>litmus.Test</code>. The <code>async</code> method returns a handle that is used to tell litmus when the async assertions have finished:
</p>

<pre><code class="prettyprint">var handle = this.async('description of async operation');

var test = this;

setTimeout(function () {

    test.ok(1 === 1, 'one is equal to one');    

    handle.finish();

}, 50);</code></pre>

<p>
    Alternatively, you can pass a function to the <code>async</code> method, which will be called with the handle as a parameter:
</p>

<pre><code class="prettyprint">this.async('description of async operation', function (handle) {

    var test = this;

    setTimeout(function () {
        
        test.ok(1 === 1, 'one is equal to one');

        handle.finish();

    }, 50);

});</code></pre>

<h2>Skipping Tests</h2>

<p>
    From time to time, tests will only work in certain circumstances - for example in certain environments. To skip a set of assertions based on some condition use the <code>skipif</code> method, passing the number of assertions that are skipped if the supplied function is not executed:
</p>

<pre><code class="prettyprint">this.skipif(env === 'browser', 'filesystem tests skipped', 5, function () {

    this.ok(1 === 1, 'one is equal to one');

    // four more assertions... 

});</code></pre>

<h2>Writing Assertions</h2>

<p>
    See <a href="/litmus/assertions">builtin assertions</a> for a list of available assertions.
</p>


